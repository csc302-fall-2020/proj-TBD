# DOCUMENTATION
# https://swagger.io/docs/specification/about/

# ===================================== ENDPOINT TEMPLATE =====================================

# /ENDPOINT_NAME/{id}:
#     post:
#       tags: 
#         - ENDPOINT_CATEGORY
#       summary: SUMMARY
#       description: OPTIONAL_DESCRIPTION

#       parameters:
#         - in: path
#           name: id   # Must be the same name as in the path
#           required: true
#           schema:
#             type: integer
#             minimum: 10 # e.g. anything below 10 is not accepted... we probably won't need this
#           description: The user ID
#         - in: query
#           name: QUERY_PARAM_NAME
#           required: false
#           schema:
#             default: 1
#             type: integer #(array, boolean, integer, number, object, string)
#           description: PARAM_DESCRIPTION

#       requestBody:
#         description: OPTIONAL_DESCRIPTION
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/COMPONENT_NAME'
#           application/x-www-form-urlencoded:
#             schema:
#               type: object
#               properties:
#                 name:          # <--- form field name
#                   type: string
#                 fav_number:    # <--- form field name
#                   type: integer
#               required:
#                 - name
#                 - email
#           text/plain:
#             schema:
#               type: string

#       responses:
#         '200': # 201, 401 etc.
#           description: RESPONSE_DESCRIPTION
#           content:
#             application/json:
#               schema: # Can also return a ref to a component
#                 type: array #(array, boolean, integer, number, object, string)
#                 items: 
#                   type: string
#                   example: "EXAMPLE_STRING"


# ===================================== COMPONENT TEMPLATE ====================================

# COMPONENT_NAME:
#       type: object
#       properties:
#         id:
#           type: integer
#         name:
#           type: string          


# ====================================== API DESCRIPTION ======================================
openapi: 3.0.0
info:
  title: NameTBD API
  description: Description
  version: 1.0.0
paths:

  # =============== FORMS
  /forms/{FormID}:
    get:
      tags:
        - Form
      summary: Get an empty form

      parameters:
        - in: path
          name: FormID
          required: true
          schema:
            $ref: '#/components/schemas/FormID'

      responses:
        '200':
          $ref: '#/components/responses/SDCForm'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Form
      summary: Update existing form
      parameters:
        - in: path
          name: FormID
          required: true
          schema:
            $ref: '#/components/schemas/FormID'
      requestBody:
        $ref: '#/components/requestBodies/SDCFormBody'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Form
      summary: Delete existing form
      parameters:
        - in: path
          name: FormID
          required: true
          schema:
            $ref: '#/components/schemas/FormID'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'

  /forms/search:
    get:
      tags:
        - Form
      summary: Get a list of empty forms' MetaData

      parameters:
        - name: FormName
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/FormName'

      responses:
        '200':
          $ref: '#/components/responses/SDCFormMetaDataList'
        '404':
          $ref: '#/components/responses/404'

  /forms:
    post:
      tags:
        - Form
      summary: Add a new form
      requestBody:
        $ref: '#/components/requestBodies/SDCFormBody'

      responses:
        '201':
          $ref: '#/components/responses/201'

  # =============== FORM RESPONSES
  /forms/{FormID}/form-responses/{FormResponseID}:
    get:
      tags:
        - Form Responses
      summary: Get a specific form response

      parameters:
        - in: path
          name: FormResponseID
          required: true
          schema:
            $ref: '#/components/schemas/FormResponseID'
        - in: path
          name: FormID
          required: true
          schema:
            $ref: '#/components/schemas/FormResponseID'

      responses:
        '200':
          $ref: '#/components/responses/SDCFormResponse'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Form Responses
      summary: Update a form response

      parameters:
        - in: path
          name: FormResponseID
          required: true
          schema:
            $ref: '#/components/schemas/FormResponseID'
        - in: path
          name: FormID
          required: true
          schema:
            $ref: '#/components/schemas/FormResponseID'

      requestBody:
          $ref: '#/components/requestBodies/SDCFormResponseBody'

      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Form Responses
      summary: Delete a form response

      parameters:
        - in: path
          name: FormResponseID
          required: true
          schema:
            $ref: '#/components/schemas/FormResponseID'
        - in: path
          name: FormID
          required: true
          schema:
            $ref: '#/components/schemas/FormResponseID'

      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /forms/{FormID}/form-responses/search:
    get:
      tags:
         - Form Responses
      summary: Search for form responses
      parameters:
        - in: path
          name: FormID
          required: true
          schema:
            $ref: '#/components/schemas/FormResponseID'
        - name: FormFillerID
          in: query
          schema:
            $ref: '#/components/schemas/FormFillerID'
        - name: DiagnosticProcedureID
          in: query
          schema:
            $ref: '#/components/schemas/DiagnosticProcedureID'
        - name: PatientID
          in: query
          schema:
            $ref: '#/components/schemas/PatientID'
        - name: FormResponseID
          in: query
          schema:
            $ref: '#/components/schemas/FormResponseID'
      responses:
        '200':
          $ref: '#/components/responses/SDCFormResponseList'
  /forms/{FormID}/form-responses:
    post:
      parameters:
      - in: path
        name: FormID
        required: true
        schema:
          $ref: '#/components/schemas/FormResponseID'
      tags:
        - Form Responses
      summary: Create a form response
      requestBody:
        $ref: '#/components/requestBodies/SDCFormResponseBody'

      responses:
        '201':
          $ref: '#/components/responses/201'


components:
  schemas:
    DiagnosticProcedureID:
      type: string
      description: "Identifier for medical observation or test result"
    PatientID:
      type: string
      description: "Identifier for a patient"
    FormFillerID:
      type: string
      description: "Identifier for a doctor or other clinician"
    FormID:
      type: string
      description: "Identifier for an SDC form template"
    QuestionID:
      type: string
      description: "Identifier for an SDC form question"
    FormResponseID:
      type: string
      description: "Identifier for a specific form response"
    FormName:
      type: string
      description: "Form name"
    Version:
      type: string
      description: "Version number for a form"
    SDCQuestion:
      type: object
      description: "A question in a form"
      properties:
        QuestionID:
          $ref: '#/components/schemas/QuestionID'
        QuestionString:
          type: string
          description: "The question to be asked for a SDC form question in String form"
        QuestionType:
          type: string
          description: "Type for an SDC form question"
        enabled:
          type: boolean
          description: "Whether the question is enabled/disabled in the form"
        order:
          type: number
          description: "Order of the question in the form"
        DependentQuestions:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SDCQuestion'
              - $ref: '#/components/schemas/SDCMultipleChoiceQuestion'
              - $ref: '#/components/schemas/SDCRadioQuestion'
              - $ref: '#/components/schemas/SDCTrueFalseQuestion'
          discriminator:
            propertyName: QuestionType
    SDCMultipleChoiceQuestion:
      allOf:
      - type: object
      - $ref: '#/components/schemas/SDCQuestion'
      - description: "An Multiple Choice question in a form"
      properties:
        options:
          type: array
          items:
            type: string
    SDCRadioQuestion:
      allOf:
      - $ref: '#/components/schemas/SDCQuestion'
      - type: object
      - description: "An Radio question in a form"
      properties:
        options:
          type: array
          items:
            type: string
    SDCTrueFalseQuestion:
      allOf:
      - $ref: '#/components/schemas/SDCQuestion'
      - type: object
      - description: "An True/False question in a form"
    SDCAnswer:
      type: object
      description: "The object containing the answer and metadata to a question in a SDC form"
      properties:
        QuestionID:
          $ref: '#/components/schemas/QuestionID'
        AnswerType:
          type: string
          description: "The type of the answer"
        Answer:
          type: string
          description: "The answer string for a SDC form question"
    SDCMultipleChoiceAnswer:
      allOf:
      - $ref: '#/components/schemas/SDCAnswer'
      - type: object
      - description: "An answer to a multiple choice question"
    SDCTrueFalseAnswer:
      allOf:
      - $ref: '#/components/schemas/SDCAnswer'
      - type: object
      - description: "An answer to a True/False question"
    SDCRadioAnswer:
      allOf:
      - $ref: '#/components/schemas/SDCAnswer'
      - type: object
      - description: "An answer to a Radio question"
    SDCSection:
      type: object
      description: "An object that represents a section in an SDC xml file"
      properties:
        SectionTitle:
          type: string
        Questions:
          type: array
          items:
            anyOf:
            - $ref: '#/components/schemas/SDCQuestion'
            - $ref: '#/components/schemas/SDCMultipleChoiceQuestion'
            - $ref: '#/components/schemas/SDCRadioQuestion'
            - $ref: '#/components/schemas/SDCTrueFalseQuestion'
          discriminator:
            propertyName: QuestionType
    SDCForm:
      type: object
      description: "An object that represents the structured data in an SDC xml file"
      properties:
        FormID:
          $ref: '#/components/schemas/FormID'
        DiagnosticProcedureID:
          $ref: '#/components/schemas/DiagnosticProcedureID'
        FormName:
          $ref: '#/components/schemas/FormName'
        Version:
          $ref: '#/components/schemas/Version'
        FormSections:
          type: array
          items:
            $ref: '#/components/schemas/SDCSection'
    SDCFormResponse:
      type: object
      description: "An object that contains the response to a SDCForm"
      properties:
        FormResponseID:
          $ref: '#/components/schemas/FormResponseID'
        FormID:
          $ref: '#/components/schemas/FormID'
        DiagnosticProdedureID:
          $ref: '#/components/schemas/DiagnosticProcedureID'
        PatientID:
          $ref: '#/components/schemas/PatientID'
        FormFillerID:
          $ref: '#/components/schemas/FormFillerID'
        Answers:
          type: object
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/SDCAnswer'
            - $ref: '#/components/schemas/SDCRadioAnswer'
            - $ref: '#/components/schemas/SDCMultipleChoiceAnswer'
            - $ref: '#/components/schemas/SDCTrueFalseAnswer'
          discriminator:
            propertyName: AnswerType
    SDCFormMetaData:
        type: object
        description: "An object containing MetaData to a SDCForm"
        properties:
          FormID:
            $ref: '#/components/schemas/FormID'
          DiagnosticProdedureID:
            $ref: '#/components/schemas/DiagnosticProcedureID'
          FormName:
            $ref: '#/components/schemas/FormName'
          Version:
            $ref: '#/components/schemas/Version'



  requestBodies:
    SDCFormResponseBody:
      description: "A request body for submitting a form response"
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDCFormResponse'
    SDCFormBody:
      description: "A request body for uploading an xml form"
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDCForm'

  responses:
    201:
      description: "Successfully created"
    204:
      description: "No Content"
    400:
      description: "Bad request"
    401:
      description: "Unauthorized"
    404:
      description: "Resource not found"
    403:
      description: "Forbidden"
    SDCFormResponse:
      description: "An SDC Form Response"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDCFormResponse'
    SDCFormResponseList:
      description: "A list of SDC Forms"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SDCFormResponse'
    SDCForm:
      description: "An SDC Form"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDCForm'
    SDCFormMetaDataList:
      description: "A list of SDC Forms' MetaData"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SDCFormMetaData'


